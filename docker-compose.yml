# 시설 관리 시스템 Docker Compose 설정
version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: qiro-postgres
    environment:
      POSTGRES_DB: qiro_prod
      POSTGRES_USER: qiro
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - qiro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qiro -d qiro_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: qiro-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - qiro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 백엔드 API 서버
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qiro-backend
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DATABASE_URL: jdbc:postgresql://postgres:5432/qiro_prod
      DATABASE_USERNAME: qiro
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      FILE_UPLOAD_PATH: /var/qiro/uploads
      STORAGE_TYPE: local
      SMS_PROVIDER: ${SMS_PROVIDER}
      SMS_API_KEY: ${SMS_API_KEY}
      SMS_SENDER: ${SMS_SENDER}
      EMAIL_PROVIDER: smtp
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}
      FCM_SERVER_KEY: ${FCM_SERVER_KEY}
      FCM_PROJECT_ID: ${FCM_PROJECT_ID}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      API_DOCS_ENABLED: ${API_DOCS_ENABLED:-false}
      SWAGGER_UI_ENABLED: ${SWAGGER_UI_ENABLED:-false}
    volumes:
      - backend_uploads:/var/qiro/uploads
      - backend_logs:/var/log/qiro
    ports:
      - "8080:8080"
    networks:
      - qiro-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: qiro-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - backend_uploads:/var/www/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - qiro-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: qiro-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - qiro-network
    restart: unless-stopped

  # Grafana 대시보드
  grafana:
    image: grafana/grafana:latest
    container_name: qiro-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - qiro-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # 로그 수집 (Filebeat)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: qiro-filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - backend_logs:/var/log/qiro:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - qiro-network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  qiro-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16