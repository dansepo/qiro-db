version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:17.5
    container_name: qiro-postgres
    environment:
      POSTGRES_DB: qiro_dev
      POSTGRES_USER: qiro
      POSTGRES_PASSWORD: p@ssword
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema:/docker-entrypoint-initdb.d
    networks:
      - qiro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qiro -d qiro_dev"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis (캐시 및 세션 저장소)
  redis:
    image: redis:7.2-alpine
    container_name: qiro-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - qiro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # QIRO 백엔드 애플리케이션
  qiro-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qiro-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/qiro_dev
      DATABASE_USERNAME: qiro
      DATABASE_PASSWORD: p@ssword
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: qiro-jwt-secret-key-for-docker-environment-change-in-production
      FILE_UPLOAD_PATH: /app/uploads
      PDF_GENERATION_PATH: /app/pdf-temp
    ports:
      - "8080:8080"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_pdf_temp:/app/pdf-temp
    networks:
      - qiro-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Prometheus (메트릭 수집)
  prometheus:
    image: prom/prometheus:latest
    container_name: qiro-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - qiro-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana (메트릭 시각화)
  grafana:
    image: grafana/grafana:latest
    container_name: qiro-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - qiro-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  app_uploads:
  app_logs:
  app_pdf_temp:
  prometheus_data:
  grafana_data:

networks:
  qiro-network:
    driver: bridge